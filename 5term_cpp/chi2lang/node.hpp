
/// ATTENTION!
/// This file has been automatically generated by the script gen_node.py.
/// There is no point editing it, try changing gen_node.py.
    
#pragma once

#include "../utils.hpp"
#include "ltoken_type.hpp"
#include "compile_state.hpp"

using std::string;
using std::unique_ptr;
using std::make_unique;

struct Node;
using Nptr = std::unique_ptr<Node>;
struct Node {
    TokenType type;
    int value;
    Nptr left, right;

    explicit Node() = default;
    explicit Node(TokenType type, Nptr left = nullptr, Nptr right = nullptr, double val = 0) :
            type(type), left(std::move(left)), right(std::move(right)), value(val) {}

    std::string Compile() const {
		CompileState st;
		return Compile(st);
    }
    
    std::string CompileCopy(CompileState& state) const {
    	CompileState st = state.Copy();
    	return Compile(st);
    }
    
    std::string Compile(CompileState& state) const {
        std::string last_mark = state.LastMark();
        std::string mark1 = state.NewMark();
        std::string mark2 = state.NewMark();
    	if (type == TokenType::CONST) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			std::string s2 = "set r8 " + std::to_string(value) + "\n";
			std::string s3 = "push r1\n";
			return s0 + s1 + s2 + s3;
		}
		if (type == TokenType::NAME) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			std::string s2 = "load r1 " + std::to_string(state.var_values[value]) + "\n";
			std::string s3 = "push r1\n";
			return s0 + s1 + s2 + s3;
		}
		if (type == TokenType::PLUS) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			std::string s2 = "pop r2\n";
			std::string s3 = "pop r1\n";
			std::string s4 = "add r1 r2\n";
			std::string s5 = "push r1\n";
			return s0 + s1 + s2 + s3 + s4 + s5;
		}
		if (type == TokenType::MINUS) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			std::string s2 = "pop r2\n";
			std::string s3 = "pop r1\n";
			std::string s4 = "sub r1 r2\n";
			std::string s5 = "push r1\n";
			return s0 + s1 + s2 + s3 + s4 + s5;
		}
		if (type == TokenType::MULT) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			std::string s2 = "pop r2\n";
			std::string s3 = "pop r1\n";
			std::string s4 = "mul r1 r2\n";
			std::string s5 = "push r1\n";
			return s0 + s1 + s2 + s3 + s4 + s5;
		}
		if (type == TokenType::DIV) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			std::string s2 = "pop r2\n";
			std::string s3 = "pop r1\n";
			std::string s4 = "div r1 r2\n";
			std::string s5 = "push r1\n";
			return s0 + s1 + s2 + s3 + s4 + s5;
		}
		if (type == TokenType::MOD) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			std::string s2 = "pop r2\n";
			std::string s3 = "pop r1\n";
			std::string s4 = "mod r1 r2\n";
			std::string s5 = "push r1\n";
			return s0 + s1 + s2 + s3 + s4 + s5;
		}
		if (type == TokenType::LAND) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			std::string s2 = "pop r2\n";
			std::string s3 = "pop r1\n";
			std::string s4 = "and r1 r2\n";
			std::string s5 = "push r1\n";
			return s0 + s1 + s2 + s3 + s4 + s5;
		}
		if (type == TokenType::LOR) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			std::string s2 = "pop r2\n";
			std::string s3 = "pop r1\n";
			std::string s4 = "or r1 r2\n";
			std::string s5 = "push r1\n";
			return s0 + s1 + s2 + s3 + s4 + s5;
		}
		if (type == TokenType::XOR) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			std::string s2 = "pop r2\n";
			std::string s3 = "pop r1\n";
			std::string s4 = "xor r1 r2\n";
			std::string s5 = "push r1\n";
			return s0 + s1 + s2 + s3 + s4 + s5;
		}
		if (type == TokenType::LESS) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			std::string s2 = "pop r2\n";
			std::string s3 = "pop r1\n";
			std::string s4 = "less r1 r2\n";
			std::string s5 = "jmpncmp " + mark1 + "\n";
			std::string s6 = "set r1 1\n";
			std::string s7 = "jmp " + mark2 + "\n";
			std::string s8 = "" + mark1 + "\n";
			std::string s9 = "set r1 0\n";
			std::string s10 = "" + mark2 + "\n";
			std::string s11 = "push r1\n";
			return s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11;
		}
		if (type == TokenType::EQ) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			std::string s2 = "pop r2\n";
			std::string s3 = "pop r1\n";
			std::string s4 = "eq r1 r2\n";
			std::string s5 = "jmpncmp " + mark1 + "\n";
			std::string s6 = "set r1 1\n";
			std::string s7 = "jmp " + mark2 + "\n";
			std::string s8 = "" + mark1 + "\n";
			std::string s9 = "set r1 0\n";
			std::string s10 = "" + mark2 + "\n";
			std::string s11 = "push r1\n";
			return s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11;
		}
		if (type == TokenType::ASSIGN) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = "pop r2\n";
			std::string s2 = "pop r1\n";
			std::string s3 = "set r3 " + std::to_string(value) + "\n";
			std::string s4 = "store r3 r2\n";
			std::string s5 = "push r2\n";
			std::string s6 = right ? right->Compile(state) : "";
			return s0 + s1 + s2 + s3 + s4 + s5 + s6;
		}
		if (type == TokenType::IF) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			return s0 + s1;
		}
		if (type == TokenType::IF_LEFT) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = "pop r1\n";
			std::string s2 = "set r2 1\n";
			std::string s3 = "cmp r1 r2\n";
			std::string s4 = "jmpncmp " + mark1 + "\n";
			std::string s5 = right ? right->Compile(state) : "";
			std::string s6 = "jmp " + mark2 + "\n";
			std::string s7 = "" + mark1 + "\n";
			return s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7;
		}
		if (type == TokenType::IF_RIGHT) {
			std::string s0 = left ? left->CompileCopy(state) : "";
			std::string s1 = "jmp " + mark1 + "\n";
			std::string s2 = "" + last_mark + "\n";
			std::string s3 = right ? right->CompileCopy(state) : "";
			std::string s4 = "" + mark1 + "\n";
			return s0 + s1 + s2 + s3 + s4;
		}
		if (type == TokenType::WHILE) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			return s0 + s1;
		}
		if (type == TokenType::WHILE_LEFT) {
			std::string s0 = "" + mark1 + "\n";
			std::string s1 = left ? left->Compile(state) : "";
			std::string s2 = "pop r1\n";
			std::string s3 = "set r2 1\n";
			std::string s4 = "cmp r1 r2\n";
			std::string s5 = "jmpcmp " + mark2 + "\n";
			std::string s6 = right ? right->Compile(state) : "";
			std::string s7 = "jmp " + mark1 + "" + mark2 + "\n";
			return s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7;
		}
		if (type == TokenType::WHILE_RIGHT) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			return s0 + s1;
		}
		if (type == TokenType::DEF) {
			std::string s0 = "jmp " + mark1 + "\n";
			std::string s1 = "" + mark2 + "\n";
			std::string s2 = left ? left->Compile(state) : "";
			std::string s3 = right ? right->Compile(state) : "";
			std::string s4 = "" + mark1 + "\n";
			return s0 + s1 + s2 + s3 + s4;
		}
		if (type == TokenType::DECLVAR) {
			state.AddVar(value);
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			return s0 + s1;
		}
		if (type == TokenType::ENDINSTR) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			std::string s2 = "pop r1\n";
			return s0 + s1 + s2;
		}
		if (type == TokenType::PRINT) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			std::string s2 = "pop r1\n";
			std::string s3 = "out_int r1\n";
			return s0 + s1 + s2 + s3;
		}
		if (type == TokenType::NOP) {
			std::string s0 = left ? left->Compile(state) : "";
			std::string s1 = right ? right->Compile(state) : "";
			return s0 + s1;
		}
    }
};
